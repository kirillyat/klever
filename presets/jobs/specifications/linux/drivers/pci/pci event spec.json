{
  "3.14": {
    "environment processes": {
      "pci_scenario": {
        "actions": {
          "call": {
            "comment": "Driver is probed, call rest callbacks.",
            "process": "[callback].{call} | [suspend].[suspend_late].[resume_early].[resume].{call} | [shutdown].[release].{main}"
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "deregister": {
            "comment": "Stop PCI callbacks invocation.",
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "free": {
            "comment": "Free memory of pci_dev structure.",
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "init": {
            "comment": "Allocate memory for pci_dev structure.",
            "statements": [
              "$ALLOC(%resource%);",
              "%choice% = $SIZE(%ids%) ? ldv_undef_int_range(0, $SIZE(%ids%) - 1) : 0;",
              "%device_id% = & %container%->id_table[%choice%];"
            ]
          },
          "main": {
            "comment": "New device is inserted, probe it.",
            "process": "[probe].(<probe_success>.{call} | <probe_failed>).{main} | <free>.(deregister)"
          },
          "probe": {
            "callback": "%container.probe%",
            "callback return value": "%ret%",
            "comment": "Probe new PCI driver.",
            "parameters": [
              "%resource%", "%device_id%"
            ],
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ],
            "pre-call": [
              "ldv_pre_probe();"
            ]
          },
          "probe_failed": {
            "comment": "Failed to probe PCI driver.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "probe_success": {
            "comment": "Probing of PCI driver has been successful.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "register": {
            "comment": "Begin PCI callbacks invocation.",
            "parameters": [
              "%container%"
            ]
          },
          "release": {
            "callback": "%container.release%",
            "parameters": [
              "%resource%"
            ]
          },
          "resume": {
            "callback": "%container.resume%",
            "parameters": [
              "%resource%"
            ]
          },
          "resume_early": {
            "callback": "%container.resume_early%",
            "parameters": [
              "%resource%"
            ]
          },
          "shutdown": {
            "callback": "%container.shutdown%",
            "parameters": [
              "%resource%"
            ]
          },
          "suspend": {
            "callback": "%container.suspend%",
            "callback return value": "%ret%",
            "parameters": [
              "%resource%"
            ],
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "suspend_late": {
            "callback": "%container.suspend_late%",
            "callback return value": "%ret%",
            "parameters": [
              "%resource%"
            ],
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          }
        },
        "comment": "Invoke PCI driver callbacks.",
        "labels": {
          "callback": {
            "callback": true
          },
          "container": {
            "container": true,
            "interface": ["pci.pci_driver"]
          },
          "resource": {
            "resource": true,
            "interface": ["pci.dev"]
          },
          "device_id": {
            "interface": ["pci.pci_device_id"]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          },
          "choice": {
            "declaration": "int a",
            "value": "0"
          },
          "ids": {
            "container": true,
            "interface": [
              "pci.driver_ids"
            ]
          }
        },
        "process": "(!register).<init>.{main}",
        "reference": true
      }
    },
    "functions models": {
      "pci_register_driver, __pci_register_driver": {
        "actions": {
          "assign": {
            "comment": "Get callbacks to register provided within 'pci_driver' argument.",
            "statements": [
              "%pci_driver% = $ARG1;"
            ]
          },
          "fail": {
            "comment": "Fail PCI callbacks registration.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "register": {
            "parameters": [
              "%pci_driver%"
            ]
          },
          "success": {
            "comment": "Registration of pci_driver callbacks has been finished successfully.",
            "statements": [
              "return 0;"
            ]
          }
        },
        "comment": "Register PCI callbacks.",
        "labels": {
          "pci_driver": {
            "container": true,
            "interface": [
              "pci.pci_driver"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "reference": true
      },
      "pci_unregister_driver": {
        "actions": {
          "assign": {
            "comment": "Get callbacks to deregister provided within 'pci_driver' argument.",
            "statements": [
              "%pci_driver% = $ARG1;"
            ]
          },
          "deregister": {
            "parameters": [
              "%pci_driver%"
            ]
          }
        },
        "comment": "Deregister PCI callbacks.",
        "labels": {
          "pci_driver": {
            "container": true,
            "interface": [
              "pci.pci_driver"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      }
    }
  },
  "5.5": {
    "environment processes": {
      "pci_scenario": {
        "actions": {
          "call": {
            "comment": "Driver is probed, call rest callbacks.",
            "process": "[callback].{call} | [suspend].[resume].{call} | [shutdown].[release].{main}"
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "deregister": {
            "comment": "Stop PCI callbacks invocation.",
            "condition": [
              "%container% == $ARG1"
            ],
            "parameters": [
              "%container%"
            ]
          },
          "free": {
            "comment": "Free memory of pci_dev structure.",
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "init": {
            "comment": "Allocate memory for pci_dev structure.",
            "statements": [
              "$ALLOC(%resource%);",
              "%choice% = $SIZE(%ids%) ? ldv_undef_int_range(0, $SIZE(%ids%) - 1) : 0;",
              "%device_id% = & %container%->id_table[%choice%];"
            ]
          },
          "main": {
            "comment": "New device is inserted, probe it.",
            "process": "[probe].(<probe_success>.{call} | <probe_failed>).{main} | <free>.(deregister)"
          },
          "probe": {
            "callback": "%container.probe%",
            "callback return value": "%ret%",
            "comment": "Probe new PCI driver.",
            "parameters": [
              "%resource%", "%device_id%"
            ],
            "post-call": [
              "%ret% = ldv_post_probe(%ret%);"
            ],
            "pre-call": [
              "ldv_pre_probe();"
            ]
          },
          "probe_failed": {
            "comment": "Failed to probe PCI driver.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "probe_success": {
            "comment": "Probing of PCI driver has been successful.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "register": {
            "comment": "Begin PCI callbacks invocation.",
            "parameters": [
              "%container%"
            ]
          },
          "release": {
            "callback": "%container.release%",
            "parameters": [
              "%resource%"
            ]
          },
          "resume": {
            "callback": "%container.resume%",
            "parameters": [
              "%resource%"
            ]
          },
          "shutdown": {
            "callback": "%container.shutdown%",
            "parameters": [
              "%resource%"
            ]
          },
          "suspend": {
            "callback": "%container.suspend%",
            "callback return value": "%ret%",
            "parameters": [
              "%resource%"
            ],
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          }
        },
        "comment": "Invoke PCI driver callbacks.",
        "labels": {
          "callback": {
            "callback": true
          },
          "container": {
            "container": true,
            "interface": ["pci.pci_driver"]
          },
          "resource": {
            "resource": true,
            "interface": ["pci.dev"]
          },
          "device_id": {
            "interface": ["pci.pci_device_id"]
          },
          "ret": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          },
          "choice": {
            "declaration": "int a",
            "value": "0"
          },
          "ids": {
            "container": true,
            "interface": [
              "pci.driver_ids"
            ]
          }
        },
        "process": "(!register).<init>.{main}",
        "reference": true
      }
    },
    "functions models": {
      "pci_register_driver, __pci_register_driver": {
        "actions": {
          "assign": {
            "comment": "Get callbacks to register provided within 'pci_driver' argument.",
            "statements": [
              "%pci_driver% = $ARG1;"
            ]
          },
          "fail": {
            "comment": "Fail PCI callbacks registration.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "register": {
            "parameters": [
              "%pci_driver%"
            ]
          },
          "success": {
            "comment": "Registration of pci_driver callbacks has been finished successfully.",
            "statements": [
              "return 0;"
            ]
          }
        },
        "comment": "Register PCI callbacks.",
        "labels": {
          "pci_driver": {
            "container": true,
            "interface": [
              "pci.pci_driver"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "reference": true
      },
      "pci_unregister_driver": {
        "actions": {
          "assign": {
            "comment": "Get callbacks to deregister provided within 'pci_driver' argument.",
            "statements": [
              "%pci_driver% = $ARG1;"
            ]
          },
          "deregister": {
            "parameters": [
              "%pci_driver%"
            ]
          }
        },
        "comment": "Deregister PCI callbacks.",
        "labels": {
          "pci_driver": {
            "container": true,
            "interface": [
              "pci.pci_driver"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      }
    }
  }
}
