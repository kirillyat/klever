{
  "2.6.33": {
    "environment processes": {
      "hid_driver_scenario": {
        "actions": {
          "alloc_device": {
            "comment": "Allocate memory and initialize new hid device.",
            "statements": [
              "$ALLOC(%resource%);",
              "%choice% = $SIZE(%ids%) ? ldv_undef_int_range(0, $SIZE(%ids%) - 1) : 0;",
              "%hid_id% = & %hid_driver%->id_table[%choice%];"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "deregister": {
            "condition": [
              "%hid_driver% == $ARG1"
            ],
            "parameters": [
              "%hid_driver%"
            ]
          },
          "failed_probe": {
            "comment": "Failed probing the HID device.",
            "condition": [
              "%probe_retval% != 0"
            ]
          },
          "free_device": {
            "comment": "Free allocated memory for HID device.",
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "manage_hid": {
            "comment": "Manage a particular HID device.",
            "process": "[probe].(<probe_success>.([callback] | <skip>).[remove] | <failed_probe>).{manage_hid} | <free_device>.(deregister)"
          },
          "probe": {
            "callback": "%hid_driver.probe%",
            "callback return value": "%probe_retval%",
            "comment": "Probe the new HID device.",
            "parameters": [
              "%resource%", "%hid_id%"
            ],
            "post-call": [
              "%probe_retval% = ldv_post_probe(%probe_retval%);"
            ],
            "pre-call": [
              "ldv_pre_probe();"
            ]
          },
          "probe_success": {
            "comment": "Probing was successfully.",
            "condition": [
              "%probe_retval% == 0"
            ]
          },
          "register": {
            "comment": "Begin HID Driver callbacks invocation scenario.",
            "parameters": [
              "%hid_driver%"
            ]
          },
          "remove": {
            "callback": "%hid_driver.remove%",
            "comment": "HID device is no more accessible.",
            "parameters": [
              "%hid_driver%"
            ]
          },
          "skip": {
            "comment": "Do not suspend or reset the HID device."
          }
        },
        "comment": "Invoke a random HID driver callback.",
        "labels": {
          "callback": {
            "callback": true
          },
          "hid_driver": {
            "container": true,
            "interface": [
              "hid_driver.hid_driver"
            ]
          },
          "probe_retval": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          },
          "resource": {
            "resource": true
          },
          "hid_id": {
            "interface": [
              "hid_driver.hid_id"
            ]
          },
          "choice": {
            "declaration": "int a",
            "value": "0"
          },
          "ids": {
            "container": true,
            "interface": [
              "hid_driver.driver_ids"
            ]
          }
        },
        "process": "(!register).(<alloc_device>.{manage_hid})"
      }
    }
  },
  "3.14": {
    "environment processes": {
      "hid_driver_scenario": {
        "actions": {
          "alloc_device": {
            "comment": "Allocate memory and initialize new hid device.",
            "statements": [
              "$ALLOC(%resource%);",
              "%choice% = $SIZE(%ids%) ? ldv_undef_int_range(0, $SIZE(%ids%) - 1) : 0;",
              "%hid_id% = & %hid_driver%->id_table[%choice%];"
            ]
          },
          "callback": {
            "callback": "%callback%",
            "parameters": [
              "%resource%"
            ]
          },
          "deregister": {
            "condition": [
              "%hid_driver% == $ARG1"
            ],
            "parameters": [
              "%hid_driver%"
            ]
          },
          "failed_probe": {
            "comment": "Failed probing the HID device.",
            "condition": [
              "%probe_retval% != 0"
            ]
          },
          "free_device": {
            "comment": "Free allocated memory for HID device.",
            "statements": [
              "$FREE(%resource%);"
            ]
          },
          "manage_hid": {
            "comment": "Manage a particular HID device.",
            "process": "[probe].(<probe_success>.([suspend].([resume] | [reset_resume]) | [callback] | <skip>).[remove] | <failed_probe>).{manage_hid} | <free_device>.(deregister)"
          },
          "probe": {
            "callback": "%hid_driver.probe%",
            "callback return value": "%probe_retval%",
            "comment": "Probe the new HID device.",
            "parameters": [
              "%resource%", "%hid_id%"
            ],
            "post-call": [
              "%probe_retval% = ldv_post_probe(%probe_retval%);"
            ],
            "pre-call": [
              "ldv_pre_probe();"
            ]
          },
          "probe_success": {
            "comment": "Probing was successfully.",
            "condition": [
              "%probe_retval% == 0"
            ]
          },
          "register": {
            "comment": "Begin HID Driver callbacks invocation scenario.",
            "parameters": [
              "%hid_driver%"
            ]
          },
          "remove": {
            "callback": "%hid_driver.remove%",
            "comment": "HID device is no more accessible.",
            "parameters": [
              "%hid_driver%"
            ]
          },
          "reset_resume": {
            "callback": "%hid_driver.reset_resume%",
            "comment": "The HID device is about to be resumed.",
            "parameters": [
              "%resource%"
            ]
          },
          "resume": {
            "callback": "%hid_driver.resume%",
            "comment": "The HID device is about to be resumed.",
            "parameters": [
              "%resource%"
            ]
          },
          "skip": {
            "comment": "Do not suspend or reset the HID device."
          },
          "suspend": {
            "callback": "%hid_driver.suspend%",
            "comment": "The HID Device is about to be suspended.",
            "parameters": [
              "%resource%"
            ]
          }
        },
        "comment": "Invoke a random HID driver callback.",
        "labels": {
          "callback": {
            "callback": true
          },
          "hid_driver": {
            "container": true,
            "interface": [
              "hid_driver.hid_driver"
            ]
          },
          "probe_retval": {
            "declaration": "int a",
            "value": "ldv_undef_int()"
          },
          "resource": {
            "resource": true
          },
          "hid_id": {
            "interface": [
              "hid_driver.hid_id"
            ]
          },
          "choice": {
            "declaration": "int a",
            "value": "0"
          },
          "ids": {
            "container": true,
            "interface": [
              "hid_driver.driver_ids"
            ]
          }
        },
        "process": "(!register).(<alloc_device>.{manage_hid})",
        "reference": true
      }
    },
    "functions models": {
      "hid_unregister_driver": {
        "actions": {
          "assign": {
            "comment": "Get callbacks to deregister provided within 'hid_driver' argument.",
            "statements": [
              "%hid_driver% = $ARG1;"
            ]
          },
          "deregister": {
            "parameters": [
              "%hid_driver%"
            ]
          }
        },
        "comment": "Deregister HID driver callbacks.",
        "labels": {
          "hid_driver": {
            "container": true,
            "interface": [
              "hid_driver.hid_driver"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[deregister]",
        "reference": true
      },
      "__hid_register_driver": {
        "actions": {
          "assign": {
            "comment": "Get callbacks to register provided within 'hid_driver' argument.",
            "statements": [
              "%hid_driver% = $ARG1;"
            ]
          },
          "fail": {
            "comment": "Failed the HID driver callbacks registration.",
            "statements": [
              "return ldv_undef_int_negative();"
            ]
          },
          "register": {
            "parameters": [
              "%hid_driver%"
            ]
          },
          "success": {
            "comment": "Registration of hid_driver callbacks has been finished successfully.",
            "statements": [
              "return 0;"
            ]
          }
        },
        "comment": "Register HID driver callbacks.",
        "labels": {
          "hid_driver": {
            "container": true,
            "interface": [
              "hid_driver.hid_driver"
            ],
            "parameter": true
          }
        },
        "process": "<assign>.[register].<success> | <fail>",
        "reference": true
      }
    }
  }
}
