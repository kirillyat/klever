{
  "3.14": {
    "functions models": {
      "new_inode": {
        "actions": {
          "success": {
            "comment": "Create new inode.",
            "trace relevant": true,
            "statements": [
              "%superblock% = $ARG1;",
              "%inode% = ldv_alloc_inode(%superblock%);",
              "if (%inode%) {",
              "\t%inode%->i_state = 0;",
              "}",
              "return %inode%;"
            ]
          },
          "fail": {
            "comment": "Failed to create an inode.",
            "trace relevant": true,
            "statements": [
              "return 0;"
            ]
          }
        },
        "comment": "Create an inode.",
        "labels": {
          "superblock": {
            "container": true,
            "parameter": true,
            "interface": [
              "filesystem.super_block"
            ]
          },
          "inode": {
            "parameter": true,
            "interface": [
              "inode.inode"
            ]
          }
        },
        "process": "<success> | <fail>",
        "reference": true
      },
      "d_instantiate": {
        "comment": "Model of d_instantiate from the VFS.",
        "headers": ["linux/dcache.h"],
        "labels": {},
        "actions": {
          "call": {
            "comment":"Connect the dentry with the inode.",
            "statements": [
              "$ARG1->d_inode = $ARG2;"
            ],
            "trace relevant": true
          }
        },
        "process": "<call>",
        "reference": true
      },
      "d_splice_alias": {
        "comment": "Model of d_splice_alias from the VFS.",
        "headers": ["linux/dcache.h"],
        "labels": {},
        "actions": {
          "call": {
            "comment":"Connect the dentry with the inode.",
            "statements": [
              "$ARG2->d_inode = $ARG1;",
              "return $ARG2;"
            ],
            "trace relevant": true
          }
        },
        "process": "<call>",
        "reference": true
      },
      "iget_locked": {
        "comment": "Find or create an inode by given identifier.",
        "headers": ["linux/fs.h"],
        "labels": {},
        "declarations": {
          "environment model": {
            "ldv_iget_locked": "struct inode *ldv_iget_locked(struct super_block *sb, unsigned long ino);"
          }
        },
        "actions": {
          "call": {
            "comment": "Call the model.",
            "statements": [
              "return ldv_iget_locked($ARG1, $ARG2);"
            ],
            "trace relevant": true
          }
        },
        "process": "<call>",
        "reference": true
      },
      "iput": {
        "comment": "Decrement reference counter for inode and release its memory if it is not used anymore.",
        "headers": ["linux/fs.h"],
        "labels": {},
        "declarations": {
          "environment model": {
            "ldv_iput": "void ldv_iput(struct inode *inode);"
          }
        },
        "actions": {
          "call": {
            "comment": "Call the model.",
            "statements": [
              "return ldv_iput($ARG1);"
            ],
            "trace relevant": true
          }
        },
        "process": "<call>",
        "reference": true
      },
      "inode_init_once": {
        "comment": "Init inode fields at creation.",
        "headers": ["linux/fs.h"],
        "labels": {},
        "declarations": {
          "environment model": {
            "ldv_inode_init_once": "void ldv_inode_init_once(struct inode *inode);"
          }
        },
        "actions": {
          "call": {
            "comment":"Call the model.",
            "statements": [
              "ldv_inode_init_once($ARG1);"
            ],
            "trace relevant": true
          }
        },
        "process": "<call>",
        "reference": true
      },
      "clear_inode": {
        "comment": "Clear inode before deletion.",
        "headers": ["linux/fs.h"],
        "labels": {},
        "declarations": {
          "environment model": {
            "ldv_clear_inode": "void ldv_clear_inode(struct inode *inode);"
          }
        },
        "actions": {
          "call": {
            "comment":"Call the model.",
            "statements": [
              "ldv_clear_inode($ARG1);"
            ],
            "trace relevant": true
          }
        },
        "process": "<call>",
        "reference": true
      }
    },
    "environment processes": {
      "inode_scenario": {
        "comment": "File system scenario.",
        "reference": true,
        "headers": [
          "linux/fs.h",
          "linux/dcache.h",
          "ldv/linux/fs.h"
        ],
        "labels": {
          "parent_inode": {
            "resource": true,
            "interface": [
              "inode.inode"
            ]
          },
          "created_inode": {
            "resource": true,
            "interface": [
              "inode.inode"
            ]
          },
          "dentry": {
            "resource": true,
            "interface": [
              "inode.dentry"
            ]
          },
          "inode_operations": {
            "container": true,
            "interface": [
              "inode.inode_operations"
            ]
          },
          "ret": {
            "declaration": "int ret;"
          }
        },
        "process": "(!inode_register).<init>.[mkdir].(<mkdir_success>.[rmdir] | <mkdir_fail>).(inode_deregister)",
        "actions": {
          "inode_register": {
            "comment": "Begin the inode-related callbacks invocation scenario.",
            "parameters": []
          },
          "inode_deregister": {
            "comment": "Finish the inode-related callbacks invocation scenario.",
            "parameters": []
          },
          "init": {
            "comment": "Prepare the parent inode (get root one) and a new dentry.",
            "statements": [
              "%parent_inode% = ldv_inodes[0];",
              "$UALLOC(%dentry%);"
            ]
          },
          "mkdir": {
            "comment": "Create an inode for a directory.",
            "callback": "%inode_operations.mkdir%",
            "parameters": [
              "%parent_inode%", "%dentry%"
            ],
            "callback return value": "%ret%"
          },
          "rmdir": {
            "comment": "Delete created directory.",
            "callback": "%inode_operations.rmdir%",
            "parameters": ["%created_inode%", "%dentry%"]
          },
          "mkdir_success": {
            "comment": "Directory created successfully.",
            "condition": [
              "%ret% != 0"
            ],
            "statements": [
              "%created_inode% = ldv_inodes[ldv_created_cnt];"
            ],
            "trace relevant": true
          },
          "mkdir_fail": {
            "comment": "Failed to delete the directory.",
            "condition": [
              "%ret% == 0"
            ]
          }
        }
      }
    }
  }
}
