/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file ("$this")
{
#include <linux/types.h>

extern void *ldv_common_alloc(gfp_t flags);
extern int ldv_common_alloc_return_int(gfp_t flags);
extern void *ldv_common_zalloc(gfp_t flags);
}

/* Functions which has parameter of type gfp_t. */
pointcut ALLOC: execution(static inline struct page *alloc_pages(.., gfp_t flags, ..)) ||
				call(struct page *alloc_pages_vma(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *alloc_skb(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *alloc_skb_fclone(.., gfp_t flags, ..)) ||
				call(struct sk_buff *skb_copy(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *skb_share_check(.., gfp_t flags, ..)) ||
				call(struct sk_buff *skb_clone(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *skb_unshare(.., gfp_t flags, ..)) ||
				/* __dev_alloc_skb() calls alloc_skb() so we don't need to instrument it. */
				call(struct urb *usb_alloc_urb(.., gfp_t flags, ..)) ||
				/* This is rather optional for SLAB memory subsystem, just for SLUB. */
				execution(static inline void *kmalloc_node(.., gfp_t flags, ..)) ||
				/* This function isn't static inline and has no body to be instrumented among related to a driver files. So instrument calls to it. */
				call(void *mempool_alloc(.., gfp_t flags, ..)) ||
				call(void *dma_pool_alloc(.., gfp_t flags, ..)) ||
				call(void *krealloc(.., gfp_t flags, ..)) ||
				call(struct sk_buff *__netdev_alloc_skb(.., gfp_t flags, ..)) ||
				call(void *usb_alloc_coherent(.., gfp_t flags, ..)) ||
				call(struct sk_buff *skb_copy_expand(.., gfp_t flags, ..)) ||
				execution(static inline void *dma_zalloc_coherent(.., gfp_t flags, ..)) ||
				execution(static inline void *dma_alloc_coherent(.., gfp_t flags, ..))

pointcut ALLOC_RETURN_INT: call(unsigned long __get_free_pages(.., gfp_t flags, ..)) ||
						   call(int usb_submit_urb(.., gfp_t flags, ..)) ||
						   call(int mempool_resize(.., gfp_t flags, ..)) ||
						   call(int pskb_expand_head(.., gfp_t flags, ..))

/* Separately weave *zalloc*() because it should not call kmalloc() in the body. */
pointcut ZALLOC: execution(static inline void *kzalloc_node(.., gfp_t flags, ..))

pointcut ALLOC_MACRO: define(alloc_pages(gfp_mask, order)) ||
					  define(alloc_page_vma(gfp_mask, vma, addr))

around: ALLOC
{
	return ldv_common_alloc(flags);
}

around: ALLOC_RETURN_INT
{
	return ldv_common_alloc_return_int(flags);
}

around: ZALLOC
{
	return ldv_common_zalloc(flags);
}

around: ALLOC_MACRO
{
ldv_common_alloc(gfp_mask)
}
