/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file("$this")
{
#include <ldv/linux/slab.h>
}

around: execution(static inline void *kmalloc(size_t size, gfp_t flags))
{
	return ldv_kmalloc(size, flags);
}

around: execution(static inline void *kzalloc(size_t size, gfp_t flags))
{
	return ldv_kzalloc(size, flags);
}

around: execution(static inline void *kmalloc_array(size_t n, size_t size, gfp_t flags))
{
	return ldv_kmalloc_array(n, size, flags);
}

around: execution(static inline void *kcalloc(size_t n, size_t size, gfp_t flags))
{
	return ldv_kcalloc(n, size, flags);
}

around: call(struct kmem_cache *kmem_cache_create(const char *name, size_t size, ..)) ||
        call(struct kmem_cache *kmem_cache_create(const char *name, unsigned int size, ..))
{
	return ldv_kmem_cache_create(name, size);
}

around: call(void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags))
{
	return ldv_kmem_cache_alloc(cachep, flags);
}

around: execution(static inline void *kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags))
{
	return ldv_kmem_cache_alloc(cachep, flags);
}

around: call(void kmem_cache_free(struct kmem_cache *cachep, void *objp))
{
	return ldv_kmem_cache_free(cachep, objp);
}

around: call(void kmem_cache_destroy(struct kmem_cache *cachep))
{
	return ldv_kmem_cache_destroy(cachep);
}
