/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file("$this")
{
#include <linux/types.h>
#include <ldv/linux/common.h>
#include <ldv/verifier/common.h>
#include <ldv/verifier/memory.h>
#include <ldv/verifier/nondet.h>

void* ldv_nonzero_alloc(size_t size);
void ldv_memory_free(void);
}

around: define(_THIS_IP_)
{
({0;})
}

around: call(int wl1271_acx_init_mem_config(..))
{
	void* res = ldv_malloc_unknown_size();

	if (res != 0) {
		$arg1->target_mem_map = res;
		return 0;
	} else {
		return -1;
	}
}

//These functions return or valid pointer or PTR_ERR, but not zero
around: call(void *memdup_user(..))
{
	return ldv_nonzero_alloc($arg2);
}

around: call(struct balloon_dev_info *balloon_devinfo_alloc(..))
{
	return ldv_nonzero_alloc($arg1);
}

around: call(struct address_space *balloon_mapping_alloc(..))
{
	return ldv_nonzero_alloc(sizeof(struct address_space));
}

around: call(struct rsi_hw *rsi_91x_init(..))
{
	void *res = ldv_zalloc(sizeof(struct rsi_hw));
	return res;
}

around: call(struct mem_ctl_info *edac_mc_alloc(..))
{
	void *res = ldv_zalloc($arg4);
	return res;
}

pointcut ZALLOC_UNKNOWN_SIZE:
	call(struct mmc_host *mmc_alloc_host(..))
	|| call(static inline struct mii_bus *mdiobus_alloc(..))
	|| call(struct net_device *alloc_etherdev_mqs(..))
	|| call(struct net_device *alloc_netdev_mqs(..))
	|| call(struct net_device *alloc_arcdev(..))
	|| call(struct net_device *alloc_candev(..))
	|| call(struct net_device *__alloc_ei_netdev(..))
	|| call(struct net_device *alloc_irdadev(..))
	|| call(struct net_device *rtnl_create_link(..))
	|| call(struct net_device *alloc_hdlcdev(..))
	|| call(struct net_device *alloc_fcdev(..))
	|| call(struct net_device *alloc_fddidev(..))
	|| call(struct net_device *alloc_hippi_dev(..))
	// The next one causes many false alarms.
	// || call(struct input_dev *input_allocate_device(..))
	|| call(struct mmc_host *mmc_alloc_host(..))
	|| call(struct mite_struct *mite_alloc(..))
	|| call(static struct rotary_encoder_platform_data *rotary_encoder_parse_dt(..))
	|| call(struct umc_dev *umc_device_create(..))


around: ZALLOC_UNKNOWN_SIZE
{
	// We don't know the size.
	void *res = ldv_zalloc_unknown_size();
	return res;
}


pointcut ALLOC_UNKNOWN_SIZE:
	call(char *kstrdup(..))
	|| call(char *kasprintf(..))
	// This function allocates a buffer through function fb_do_probe_ddc_edid().
	|| call(unsigned char *fb_ddc_read(..))
	/* Be careful! Sometimes the internal macros is expanded to kmalloc,
	 * sometimes - to kzalloc. May be there will be a need in more precise model.
         */
	|| call(union acpi_object *acpi_evaluate_dsm(..))
	// Calls kmalloc.
	|| call(struct edid *drm_get_edid(..))
	// Calls kzalloc and set the result to the first argument, not to return value.
	|| call(int au8522_get_state(..))
	// Calls kmalloc and set the result to the second argument.
	|| call(acpi_status acpi_get_object_info(..))
	/* Calls kzalloc and set the result to the third argument.
	 * Now it doesn't work - the third argument is an address.
     */
	|| call(size_t pcmcia_get_tuple(..))
	// Calls kmalloc.
	|| call(unsigned char *scsi_bios_ptable(..))
	|| call(u8 *hid_alloc_report_buf(..))
	|| call(char *match_strdup(..))


around: ALLOC_UNKNOWN_SIZE
{
	// We don't know the size.
	void *res = ldv_malloc_unknown_size();
	return res;
}

around: call(struct iio_dev *devm_iio_device_alloc(..))
{
	// Calls kzalloc, be careful!
	// Memory allocated with this function is automatically freed on driver detach.
	void *res = ldv_calloc_unknown_size();
	return res;
}

// Next functions can't return positive value (only zero or negative code of error).
pointcut NONPOSITIVE:
	call(int mantis_dvb_init(..))
	|| call(int dvb_register_frontend(..))
	|| call(int tty_register_ldisc(..))
	|| call(int ide_pci_init_one(..))
	|| call(int ide_pci_init_two(..))
	|| call(int platform_device_add(..))
	|| call(int usb_submit_urb(..))
	|| call(int register_netdev(..))
	|| call(int nfc_register_device(..))
	|| call(int sensor_hub_register_callback(..))
	|| call(int usb_register_dev(..))
	|| call(int request_threaded_irq(..))
	|| call(int bus_register(..))
	|| call(int mmc_add_host(..))
	|| call(int iosf_mbi_read(..))
	|| call(int pci_request_regions(..))
	|| call(int iosf_mbi_write(..))
	|| call(int pci_enable_device(..))

after: NONPOSITIVE
{
	return ldv_undef_int_nonpositive();
}

pointcut ZERO_RETURN:
	call(int nonseekable_open(..))
	|| call(int mantis_uart_init(..))

after: ZERO_RETURN
{
	return 0;
}

pointcut FREE:
	call(void kfree(..))
	|| call(void kzfree(..))
	// This function contains only kfree().
	|| call(void fb_destroy_modedb(..))
	// Calls only kfree.
	|| call(int del_mtd_blktrans_dev(..))
	// Uses put_device and promises to free it.
	|| call(void free_netdev(..))
	|| call(void free_candev(..))
	// Calls put_device.
	|| call(void mmc_free_host(..))
	|| call(void serio_unregister_port(..))
	|| call(void mdiobus_free(..))
	// || call(void input_free_device(..))
	|| call(void edac_mc_free(..))

around: FREE
{
    ldv_free((void *)$arg1);
}

around: call(void rsi_91x_deinit(..))
{
	if ($arg1->rsi_dev != 0) {
		ldv_memory_free();
	}
	if ($arg1 != 0) {
		ldv_memory_free();
	}
}

// Workaround to find exactly the bug described in commit c0cc359.
after: call(int usb_set_interface(..))
{
	return ldv_undef_int_negative();
}

around: call(int v4l2_device_put(..))
{
	$arg1->release($arg1);
}

around: call(void *__memcpy(void *dest, const void *src, size_t n))
{
    return memcpy(dest, src, n);
}
